#
# File:    icarus_gallery_setup
# Purpose: setup for use of gallery macros with ICARUS
# Author:  Gianluca Petrillo (petrillo@slac.stanford.edu)
# Date:    January 26, 2023
# Version: 1.2
# 
# Usage:
# To set up the gallery/larsoftobj version compatible with a specific experiment
# code version (e.g. v09_06_00 with qualifiers e19:prof):
#     
#     setup icarusalg v09_65_02 -q e20:prof # or any suitable version
#     source icarus_gallery_setup
#     
# or let icarusalg setup happen inside this setup script:
#     
#     source icarus_gallery_setup v09_65_02 e20:prof
#     
# Currently this script:
#  * attempts to set up `icarusalg` if requested
#  * ensures that cetmodules is set up (sets up latest version if not yet)
# 
# Changes:
# 20220126 [v1.2] (petrillo@slac.stanford.edu)
#   * setup greatly simplified
#     (because icarusalg now pulls in larsoftobj and gallery);
#   * discovering UPS product setup with `ups active` instead of the XXX_SETUP
#     environment variable, which UPS does not reliably set
# 20201016 [v1.1] (petrillo@slac.stanford.edu)
#   version updates and using icarusalg instead of icaruscode;
#   added UPS check
# 20171019 [v1.0] (petrillo@fnal.gov)
#   original version from SBND
#


function ICARUSgallerySetup_CheckUPS() {
  which ups &> /dev/null
} # ICARUSgallerySetup_CheckUPS()


function ICARUSgallerySetup_setupUPS() {
  # bootstrap setup for UPS (+ experiment environment)
  local ExpName="$1"
  
  ICARUSgallerySetup_CheckUPS
  local res=$?
  
  case "$res" in
    ( 0 ) return 0 ;;
    ( 1 )
      # no UPS found; attempt to set it up, then try again
      
      # trying to guess which is the setup script...
      local expname="${ExpName,,}"
      local -a ExptSetupScriptCandidates=(
        "/cvmfs/${expname}.opensciencegrid.org/products/setup_${expname}.sh"
        "/cvmfs/${expname}.opensciencegrid.org/products/${expname}/setup_${expname}.sh"
        "" # fallback for failure
      )
      local ExptSetupScriptCandidate
      for ExptSetupScriptCandidate in "${ExptSetupScriptCandidates[@]}" ; do
        [[ -r "$ExptSetupScriptCandidate" ]] && break
      done
      if [[ -z "$ExptSetupScriptCandidate" ]]; then
        echo "ERROR: could not guess ${ExpName} setup script path: you need to source it!" >&2
        return 1
      fi
      echo "Setting up ${ExpName} environment for you ('${ExptSetupScriptCandidate}')"
      source "$ExptSetupScriptCandidate"
      res=$?
      if [[ $res != 0 ]]; then
        echo "WARNING: ${ExpName} setup script '${ExptSetupScriptCandidate}' execution failed (code: ${res})." >&2
      fi
      # repeat the check
      ICARUSgallerySetup_CheckUPS
      res=$?
      ;;
  esac
  
  [[ "$res" != 0 ]] && echo "ERROR (${res}): UPS not set up (you may need to run the experiment setup script)." >&2
  return $res
  
} # ICARUSgallerySetup_setupUPS()


function ICARUSgallerySetup_upssetup() {
  # rather than relying on `setup` from UPS, which might not be exported,
  # we use our own
  
  local -a SetupArgs=( "$@" )
  
  echo "setup ${SetupArgs[@]}"
  
  # we might check if `setup()` is actually defined... we end up not bothering
  local TempScript
  TempScript="$(ups setup "${SetupArgs[@]}")"
  local res=$?
  if [[ $res == 0 ]]; then
    source "$TempScript"
    res=$?
  fi
  [[ -w "$TempScript" ]] && rm -f "$TempScript"
  return $res
} # ICARUSgallerySetup_upssetup()


function ICARUSgallerySetup_MatchProductQualifiers() {
  local ProdVersion="$1"
  local -a ProdQualifierSpec="$2"
  local -a ProdQualifiers=( $(tr ': ' '\n' <<< "$ProdQualifierSpec" | sort -u ) )
  
  local -i iSrcQual=0
  local KeyQual
  for KeyQual in "${RequiredQualifiers[@]}" ; do
    while [[ $iSrcQual -lt ${#ProdQualifiers[@]} ]]; do
      [[ "$KeyQual" == "${ProdQualifiers[iSrcQual++]}" ]] && continue 2 # match! go to next required qualifier
    done
    return 1 # no qualifier match, this product is not good
  done
#   echo "${Product} ${ProdVersion} ${ProdQualifierSpec}"
  return 0
} # ICARUSgallerySetup_MatchProductQualifiers()


function ICARUSgallerySetup_FormatSetupPackageInfo() {
  #
  # ICARUSgallerySetup_FormatSetupPackageInfo PackageName [FormatString]
  # 
  # will print on output a string with information from `ups active` about PackageName.
  # Returns 0 if a match was found with the proper format; on format mismatch the error code is 2.
  # Supported tags for the format string are:
  #  %n  name of the package
  #  %v  version of the set up package
  #  %q  qualifiers of the set up package
  #  %f  flavour of the set up package
  #  %z  path of the repository the package set up is stored at
  # The default format string is '%n %v %f %q %z'
  #
  local -r DefaultFormatString='%n %v %f %q %z'
  local PackageName="$1"
  local FormatString="${2:-$DefaultFormatString}"

  local -r SetupVarPattern='([^ ]+) +([^ ]+) +(-f +([^ ]+))? +-q +([^ ]+) +(-z +(.+))?'
  local -ir PkgNameTag=1 PkgVersionTag=2 PkgFlavorTag=4 PkgQualTag=5 PkgRepoPathTag=7
  
  # extract the information
  local PkgSetupInfo
  # exit code is from `grep`
  PkgSetupInfo="$(ups active | grep -w "^${PackageName,,}")" || return $?
  
  [[ "$PkgSetupInfo" =~ $SetupVarPattern ]] || return 2
  
  local PkgName="${BASH_REMATCH[$PkgNameTag]}"
  local PkgVersion="${BASH_REMATCH[$PkgVersionTag]}"
  local PkgFlavor="${BASH_REMATCH[$PkgFlavorTag]}"
  local PkgDatabase="${BASH_REMATCH[$PkgRepoPathTag]}"
  local PkgQualifiers="${BASH_REMATCH[$PkgQualTag]}"
  
  # format the output
  local OutputString="$FormatString"
  
  OutputString="${OutputString//%n/${PkgName}}"
  OutputString="${OutputString//%v/${PkgVersion}}"
  OutputString="${OutputString//%f/${PkgFlavor}}"
  OutputString="${OutputString//%q/${PkgQualifiers}}"
  OutputString="${OutputString//%z/${PkgDatabase}}"
  
  echo "$OutputString"
  
} # ICARUSgallerySetup_FormatSetupPackageInfo()


function ICARUSgallerySetup_setupLatest() {
  # looks for what it seems to be the highest version
  # (with required qualifiers if any) and sets it up

  local -i NoMoreOptions=0
  local -a RequiredQualifiers
  local Product
  local Param iParam
  for (( iParam = 1 ; iParam <= $# ; ++iParam )); do
    Param="${!iParam}"
    if [[ -n "${NoMoreOptions//0}" ]] || [[ "${Param:0:1}" != '-' ]]; then
      if [[ -z "$Product" ]]; then
        Product="$Param"
      else
        RequiredQualifiers+=( ${Param//:/ } )
      fi
    else
      case "$Param" in
        ( '--qual' | '-q' ) let ++iParam ; RequiredQualifiers+=( ${!iParam//:/ } ) ;;
        ( '-' | '--' )      NoMoreOptions=1 ;;
        ( * )
          echo "Internal error in ${FUNCNAME}: unsupported option '${Param}'."
          return 1
      esac
    fi
  done

  RequiredQualifiers=( $(tr ': ' '\n' <<< "${RequiredQualifiers[*]}" | sort -u ) )
  local -i nRequiredQualifiers="${#RequiredQualifiers[@]}"
  
  local ProdVersion='' ProdQualifiers=''
  
  local -a AvailableProducts=( $( ups list -a -K VERSION:QUALIFIERS "$Product" | tr -d '"' | sort -r -V -u ) )
  local CandidateVerQual
  for CandidateVerQual in "${AvailableProducts[@]}" ; do
    local CandidateProdVersion CandidateProdQualifiers
    read CandidateProdVersion CandidateProdQualifiers <<< "${CandidateVerQual/:/ }"
    ICARUSgallerySetup_MatchProductQualifiers "$CandidateProdVersion" "$CandidateProdQualifiers" || continue
    ProdVersion="$CandidateProdVersion"
    ProdQualifiers="$CandidateProdQualifiers"
    break
  done
  if [[ -z "$ProdVersion" ]]; then
    echo "Error: no product '${Product}' found${RequiredQualifiers:+" compatible with all qualifiers '${RequiredQualifiers}'"}" >&2
    return $res
  fi
  
  ICARUSgallerySetup_upssetup "$Product" "$ProdVersion" ${ProdQualifiers:+ -q "$ProdQualifiers"}

} # ICARUSgallerySetup_setupLatest()


function DoICARUSgallerySetup() {
  
  ##############################################################################
  ### Experiment-specific setup
  local -r ExpName='ICARUS'
  local -r ExpCode='icarusalg'
  
  ##############################################################################
  ### Argument parsing
  ### 
  local ExpCodeVersion="$1"
  local Qualifiers="$2"
  
  ##############################################################################
  ### Environment preliminary check
  ### 
  ICARUSgallerySetup_setupUPS "$ExpName" || return $?
  
  ##############################################################################
  ### Main setup script
  ### 
  # reference package names need to be lexicographically sorted
  local -r SortedReferencePkgs=( $(tr ' ' '\n' <<< "${ReferencePkgs[@]}" | sort -u | grep -v '^$' ) )
  local -ir nReferencePkgs="${#ReferencePkgs[@]}"
  
  local PkgName PkgVersion PkgFlavor PkgQualifiers PkgDatabase Dummy
  local StrictQualifiers
  
  #
  # experiment code package setup
  #
  local ExpSetupInfo
  ExpSetupInfo="$(ICARUSgallerySetup_FormatSetupPackageInfo "$ExpCode" '%n %v %q')"
  if [[ $? == 0 ]]; then
    #
    # We have experiment code already set up
    #
    # Just check that the version is not unexpected
    #
    read PkgName PkgVersion PkgQualifiers <<< "$ExpSetupInfo"
    echo "${ExpName} code version: ${PkgName} ${PkgVersion} -q ${PkgQualifiers}"
    
    if [[ -n "$ExpCodeVersion" ]] && [[ "$ExpCodeVersion" != "$PkgVersion" ]]; then
      echo "ERROR: ${ExpCode} ${PkgVersion} already set up, can't set up version ${ExpCodeVersion} now." >&2
      return 1
    fi
    if [[ -n "$Qualifiers" ]]; then
      StrictQualifiers="+${Qualifiers//:/:+}"
      
      # doing this again will ensure that the qualifiers are the same
      ICARUSgallerySetup_upssetup -B "$ExpCode" "$ExpCodeVersion" -q "$StrictQualifiers" || return $?
      
    else
      Qualifiers="$PkgQualifiers"
      StrictQualifiers="+${Qualifiers//:/+:}"
    fi
  elif [[ -n "$ExpCodeVersion" ]] && [[ -n "${Qualifiers:=$MRB_QUALS}" ]]; then
    #
    # if we don't have experiment code package set up,
    # it's that time now, but we need to know which version
    #
    StrictQualifiers="+${Qualifiers//:/:+}"
    ICARUSgallerySetup_upssetup -B "$ExpCode" "$ExpCodeVersion" -q "$StrictQualifiers" || return $?
  elif [[ -n "$MRB_QUALS" ]]; then
    #
    # since no version (or no qualifier) was specified, we won't pull the experiment code from UPS
    # (including any package installed in the MRB_INSTALL area).
    # Now, while MRB working area is set up,
    # the experiment code repository may or may not be checked out,
    # and the build environment may or may not be set up (`mrbsetenv`).
    # If both conditions are true (experiment code checked out and set up)
    # we don't need (and must not) set up anything.
    #
    local -r ExpVersionVarName="${ExpCode^^}_VERSION"
    if [[ -z "${!ExpVersionVarName}" ]]; then
      cat <<EOM >&2
To set up gallery environment, you either need:
a) ${ExpCode} already set up (it's not), or
b) to specify the ${ExpCode} version and qualifiers (you didn't);
   for example: source ${BASH_SOURCE[0]} v09_65_02 e20:prof
c) to have a MRB area set up (which you have) with ${ExpCode} checked out and with \`mrbsetenv\` run (which you don't)
EOM
      return 1
    fi
    
    ExpCodeVersion="${!ExpVersionVarName}"
    Qualifiers="$MRB_QUALS"
    StrictQualifiers="+${Qualifiers//:/:+}"
    echo "${ExpName} code version: ${ExpCode} ${ExpCodeVersion} -q ${Qualifiers} in MRB development area"
    
  else
    cat <<EOM >&2
To set up gallery environment, you either need:
a) ${ExpCode} already set up (it's not), or
b) to specify the ${ExpCode} version and qualifiers (you didn't);
   for example: source ${BASH_SOURCE[0]} v06_53_00 e20:prof
c) to have a MRB area set up (which you don't have) with ${ExpCode} checked out (and with \`mrbsetenv\` run)
EOM
    return 1
    
  fi
  
  #
  # build environment setup
  #
  
  # set up cetmodules only if not yet there
  ICARUSgallerySetup_FormatSetupPackageInfo 'cetmodules' '' || ICARUSgallerySetup_setupLatest cetmodules
  
  unset DoICARUSgallerySetup
} # DoICARUSgallerySetup()


function ICARUSgallerySetupWrapper() {
  DoICARUSgallerySetup "$@"
  local res=$?
  unset ICARUSgallerySetup_CheckUPS ICARUSgallerySetup_setupUPS ICARUSgallerySetup_upssetup ICARUSgallerySetup_setupLatest ICARUSgallerySetup_MatchProductQualifiers
  unset DoICARUSgallerySetup ICARUSgallerySetupWrapper
  return $res
} # ICARUSgallerySetupWrapper


ICARUSgallerySetupWrapper "$@"

